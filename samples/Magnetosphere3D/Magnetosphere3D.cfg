# Sample Vlasiator configuration file
# Low-resolution magnetosphere with three mesh refinement levels (total 4 resolution levels)
# This simulation can run e.g. on 8 nodes with 2x AMD Epyc 7302 each (2x16 cores per node)
# In 3 hours (800 timesteps, 20 seconds of physical simulation)
# Using 8 x 31 GiB resident memory and 8 x 36 GiB high water mark memory
# Suitable for simple benchmarking of performance


# After a handful of top-level options, remnaining options are grouped in sections prefixed by [group] in this file.


# Simulation type, corresponding to a specific type of setup and a dedicated class defined under projects/ in the source
project = Magnetosphere

# Let the simulation adapt the time step according to the CFL conditions
dynamic_timestep = 1

# Arbitrary name given to at least one ion population. See [proton_properties] for its specification.
# all option groups specific to this population will be prefixed with that name, i.e. proton_* in this case.
ParticlePopulations = proton

# Set of options specifying conditions under which the run will exit gracefully to avoid potential crashing.
[bailout]
max_memory = 58 # set based on system

# Adaptive Mesh Refinement
[AMR]
max_spatial_level = 3
refine_radius = 2e8

# Input/Output
[io]
diagnostic_write_interval = 10
write_initial_state = 0
# restart_walltime_interval = 21000
# write_restart_stripe_factor = 42
# number_of_restarts = 12
# vlsv_buffer_size = 0
# write_as_float = 1

system_write_t_interval = 10
system_write_file_name = bulk
system_write_distribution_stride = 0
system_write_distribution_xline_stride = 10
system_write_distribution_yline_stride = 10
system_write_distribution_zline_stride = 10

#system_write_distribution_shell_radius = 31e6
#system_write_distribution_shell_stride = 1

# Spatial grid and run completion parameters
[gridbuilder] # Highest resolution 2250 km cubed (see [AMR])
x_length = 51
y_length = 40
z_length = 40
x_min = -6.12e8
x_max = 3.06e8
y_min = -3.6e8
y_max = 3.6e8
z_min = -3.6e8
z_max = 3.6e8

#timestep_max = 175
t_max = 20.0

# Specifications of ion population(s) declared at the top
[proton_properties]
mass = 1
mass_units = PROTON
charge = 1

# Velocity space parameters for ion population(s) declared at the top
[proton_vspace]
vx_min = -4.0e6
vx_max = +4.0e6
vy_min = -4.0e6
vy_max = +4.0e6
vz_min = -4.0e6
vz_max = +4.0e6
vx_length = 50 # in blocks of 4x4x4 v-space cells
vy_length = 50 # gives 40 km/s
vz_length = 50

# Velocity space sparsity parameters for ion population(s) declared at the top
[proton_sparse]
minValue = 1.0e-15
# dynamicAlgorithm = 0
# dynamicBulkValue1 = 1.0e6
# dynamicBulkValue2 = 1.0e7
# dynamicMinValue1 = 1.0e-15
# dynamicMinValue2 = 1.0e-13

# Options specific to the project
[Magnetosphere]
constBgBX = 0.0
constBgBY = 0.0
constBgBZ = -5.0e-9
noDipoleInSW = 0 #dipole type 4, set to 0 (default)

dipoleType = 4
dipoleTiltPhi = 0.0 
dipoleTiltTheta = 0 
dipoleXFull = 9.5565e7 # 15 RE 
dipoleXZero = 2.5e8 
dipoleInflowBX = 0.0 
dipoleInflowBY = 0.0 
dipoleInflowBZ = 0.0 

# Forced refinement regions
refine_L2radius = 11e7 # 17.27 RE
refine_L2tailthick = 2.5e7 # 3.92 RE
refine_L1radius = 1.59275e8 # 25 RE
refine_L1tailthick = 6.371e7 # 10 RE
refine_L3radius = 6.871e7 # 10.785 RE
refine_L3nosexmin = 5.0e7
refine_L3tailheight = 1.0e7
refine_L3tailwidth = 8.0e7
refine_L3tailxmin = -30.0e7
refine_L3tailxmax = -5.0e7

# Options specific to the project and the ion population
[proton_Magnetosphere]
T = 0.5e6
rho = 1.0e6
VX0 = -7.5e5
VY0 = 0.0
VZ0 = 0.0
# Taper radius during which populations transitions from ionospheric parameters to magnetospheric parameters.
# Usually the inner radius is the same as the inner boundary, here it is increased to have more hot plasma in the inner region.
taperInnerRadius = 5e7
taperOuterRadius = 1e8

# Simulation boundary conditions; periodicity and declaration of the boundary types that will be required
[boundaries]
periodic_x = no
periodic_y = no
periodic_z = no
boundary = Outflow
boundary = Maxwellian
boundary = Copysphere

# Outflow options
# Precedence sets the order of precedence for overlapping boundary types, should not be changed.
[outflow]
precedence = 3

[proton_outflow]
face = x-
face = y-
face = y+
face = z-
face = z+

# Uniform Maxwellian distribution on set face(s) of the simulation domain
[maxwellian]
face = x+
precedence = 4
reapplyUponRestart = 1

[proton_maxwellian] # inflow file
dynamic = 0
file_x+ = sw1.dat

# Spherical inner boundary with static velocity distribution and copy-condition for perturbed magnetic field
[copysphere]
centerX = 0.0
centerY = 0.0
centerZ = 0.0
radius = 38.1e6
precedence = 2
reapplyUponRestart = 1

[proton_copysphere]
# increased temperature and density close to inner boundary to add load balance challenge
T = 1.5e6
rho = 3.0e6
VX0 = 0.0
VY0 = 0.0
VZ0 = 0.0

# MPI domain load balancing options
[loadBalance]
algorithm = RCB # RIB or HYPERGRAPH may yield good performance too
# This times the approximate timestep length should be about the same or less than the fastest
# dynamics so that the computations are well-distributed across MPI ranks.
rebalanceInterval = 50
# Closer to 1.0 -> more even distribution -> but it takes longer to obtain the load balance from Zoltan
tolerance = 1.2

# Variables (data reduction operators) to be written to the output VLSV files and to the diagnostic.txt file
# fg_* variables on the finest-resolution field solver grid (/!\ can be several GB per component in large runs)
# vg_* variables on the adaptive mesh storing the plasma distribution and moments
# populations_* variables are stored separately for each specified ion population as <population>/vg_*
[variables]
#output = fg_rank
output = fg_b
#output = fg_b_perturbed
#output = fg_b_vol
#output = fg_boundarytype
output = fg_e
#output = fg_e_hall
#output = fg_maxdt_fieldsolver
#output = fg_rhom
output = populations_vg_rho
output = populations_vg_v
output = populations_vg_ptensor
output = populations_vg_blocks
output = populations_vg_effectivesparsitythreshold
output = populations_vg_energydensity
output = populations_vg_precipitationdifferentialflux
#output = populations_vg_maxdt_acceleration
#output = populations_vg_maxdt_translation
#output = populations_vg_rho_loss_adjust
output = vg_b_vol
output = vg_e_vol
output = vg_e_gradpe
output = vg_boundarytype
output = vg_f_saved
output = vg_loadbalance_weight
output = vg_rank
diagnostic = populations_vg_blocks
#diagnostic = populations_vg_rho
#diagnostic = populations_vg_rho_loss_adjust

# Options for the population-specific energy density data reducer
[proton_energydensity]
solarwindspeed = 7.5e5

# Options for the population-specific precipitation data reducer
[proton_precipitation]
nChannels = 9
emin = 500     # These are eV
emax = 50000

# Field solver options
[fieldsolver]
maxSubcycles = 50
ohmHallTerm = 2
minCFL = 0.4
maxCFL = 0.45
maxWaveVelocity = 7494811.45  #2.5% of speed of light...    

electronTemperature = 0.5e6 # inflow
electronDensity = 1.0e6 #inflow
electronPTindex = 1.666667 # adiabatic
ohmGradPeTerm = 1 # active

# Vlasov solver (translation and acceleration) options
[vlasovsolver]
minCFL = 0.8
maxCFL = 0.99
# The angle x number of subcycles should not exceed 45 deg
maxSlAccelerationRotation = 22 # in deg
maxSlAccelerationSubcycles = 2

