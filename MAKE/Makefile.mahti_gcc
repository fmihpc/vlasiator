CMP = mpic++
LNK = mpic++

# Modules loaded
# module load gcc openmpi jemalloc papi boost
#======== Vectorization ==========
#Set vector backend type for vlasov solvers, sets precision and length. 
#Options: 
# AVX:	    VEC4D_AGNER, VEC4F_AGNER, VEC8F_AGNER
# AVX512:   VEC8D_AGNER, VEC16F_AGNER
# Fallback: VEC4D_FALLBACK, VEC4F_FALLBACK, VEC8F_FALLBACK

ifeq ($(DISTRIBUTION_FP_PRECISION),SPF)
#Single-precision        
	VECTORCLASS = VEC8F_AGNER
	INC_VECTORCLASS = -I$(LIBRARY_PREFIX)/vectorclass/
	#VECTORCLASS = VEC8F_FALLBACK
	#INC_VECTORCLASS = -I$(HOME)/vlasiator/vlasovsolver
else
#Double-precision
	VECTORCLASS = VEC4D_AGNER
	INC_VECTORCLASS = -I$(LIBRARY_PREFIX)/vectorclass/
endif

FLAGS = 

#GNU flags:
CC_BRAND = gcc
CC_BRAND_VERSION = 9.3.0
CXXFLAGS += -O3 -fopenmp -funroll-loops -std=c++17 -W -Wall -Wextra -Wno-unused -mavx2

testpackage: CXXFLAGS = -O2 -fopenmp -funroll-loops -std=c++17 -fabi-version=0 -mfma

#CXXFLAGS += -g -O3 -qopenmp -std=c++11 -W -Wall -Wno-unused -march=core-avx2 -qopt-zmm-usage=high
#testpackage: CXXFLAGS = -g -traceback -O2 -qopenmp -std=c++14  -W -Wall -Wno-unused -march=core-avx2

MATHFLAGS = -freciprocal-math -fcx-limited-range -fno-math-errno -fassociative-math -fno-signed-zeros #-ffast-math
LDFLAGS = -lrt
#LDFLAGS = -qopenmp -lifcore -liomp5 -pthread -lboost_program_options -lzoltan -lvlsv -lphiprof -ljemalloc 
LIB_MPI = -lgomp 

# BOOST_VERSION = current trilinos version
# ZOLTAN_VERSION = current trilinos verson
#
#======== Libraries ===========

MPT_VERSION = 3.1.6
JEMALLOC_VERSION = 5.2.1
LIBRARY_PREFIX = /projappl/project_2002873/vlasiatorlib/


#======== PAPI ==========
#Add PAPI_MEM define to use papi to report memory consumption?
CXXFLAGS += -DPAPI_MEM
testpackage: CXXFLAGS +=  -DPAPI_MEM

#======== Allocator =========
#Use jemalloc instead of system malloc to reduce memory fragmentation? https://github.com/jemalloc/jemalloc
#Configure jemalloc with  --with-jemalloc-prefix=je_ when installing it
CXXFLAGS += -DUSE_JEMALLOC -DJEMALLOC_NO_DEMANGLE
testpackage: CXXFLAGS += -DUSE_JEMALLOC -DJEMALLOC_NO_DEMANGLE

#======= Compiler and compilation flags =========
# NOTES on compiler flags:
# CXXFLAGS is for compiler flags, they are always used
# MATHFLAGS are for special math etc. flags, these are only applied on solver functions
# LDFLAGS flags for linker

#-DNO_WRITE_AT_ALL:  Define to disable write at all to 
#                    avoid memleak (much slower IO)

# BOOST_VERSION = current trilinos version
# ZOLTAN_VERSION = current trilinos verson
#
#======== Libraries ===========

MPT_VERSION = 4.0.3
JEMALLOC_VERSION = 5.2.1
LIBRARY_PREFIX = /users/kempf/libraries_rhel8_openmpi/

#module libraries
LIB_JEMALLOC = -ljemalloc
BOOST_VERSION = 

#compiled libraries

LIB_PAPI = -lpapi

INC_VLSV = -I$(LIBRARY_PREFIX)/openmpi/$(MPT_VERSION)/$(CC_BRAND)/$(CC_BRAND_VERSION)/vlsv
LIB_VLSV = -L$(LIBRARY_PREFIX)/openmpi/$(MPT_VERSION)/$(CC_BRAND)/$(CC_BRAND_VERSION)/vlsv -lvlsv

LIB_BOOST = -lboost_program_options

INC_ZOLTAN = -I$(LIBRARY_PREFIX)/zoltan/include
LIB_ZOLTAN = -L$(LIBRARY_PREFIX)/zoltan/lib -lzoltan -Wl,-rpath=$(LIBRARY_PREFIX)/zoltan/lib


LIB_JEMALLOC = -ljemalloc

LIB_PAPI = -lpapi

INC_VLSV = -I$(LIBRARY_PREFIX)/vlsv
LIB_VLSV = -L$(LIBRARY_PREFIX)/vlsv -lvlsv -Wl,-rpath=$(LIBRARY_PREFIX)/vlsv


LIB_PROFILE = -L$(LIBRARY_PREFIX)/phiprof/lib -lphiprof -lgfortran -Wl,-rpath=$(LIBRARY_PREFIX)/phiprof/lib
INC_PROFILE = -I$(LIBRARY_PREFIX)/phiprof/include


#header libraries

INC_FSGRID = -I$(LIBRARY_PREFIX)/../libraries/fsgrid/
INC_EIGEN = -I$(LIBRARY_PREFIX)/../libraries/eigen/
INC_DCCRG = -I$(LIBRARY_PREFIX)/../libraries/dccrg/
INC_VECTORCLASS = -I$(LIBRARY_PREFIX)/../libraries/vectorclass/
