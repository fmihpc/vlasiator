# Suggested modules
# This is updated for Mahti RHEL8 as of 18th May 2022

# module purge
# module load StdEnv
# module load gcc/9.4.0
# module load cuda/11.5.0
# module load openmpi/4.1.2-cuda
# module load jemalloc
# module load papi
# one-liner:
# module purge; module load StdEnv; module load gcc/9.4.0; module load cuda/11.5.0; module load openmpi/4.1.2-cuda; module load jemalloc; module load papi

# module purge; module load StdEnv gcc/11.2.0 cuda/11.5.0 openmpi/4.1.2 jemalloc papi boost

#  Also, add this to your job script!
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/projappl/project_2000203/libraries_rhel8_gcccuda/boost/lib



#======== Vectorization ==========
#Set vector backend type for vlasov solvers, sets precision and length.
#Options:
# AVX:	    VEC4D_AGNER, VEC4F_AGNER, VEC8F_AGNER
# AVX512:   VEC8D_AGNER, VEC16F_AGNER
# Fallback: VECTORCLASS = VEC_FALLBACK_GENERIC (Defaults to VECL8)

ifeq ($(DISTRIBUTION_FP_PRECISION),SPF)
#Single-precision
        VECTORCLASS = VEC_FALLBACK_GENERIC
#        VECTORCLASS = VEC8F_AGNER
else
#Double-precision
        VECTORCLASS = VEC_FALLBACK_GENERIC
#        VECTORCLASS = VEC4D_AGNER
endif
#===== Vector Lenghts ====
# Default for VEC_FALLBACK_GENERIC is WID=4, VECL=8 
WID=8
VECL=64
#VECL=32
#WID=4
#VECL=4
#VECL=8
#VECL=16

#======= Compiler and compilation flags =========
# NOTES on compiler flags:
# CXXFLAGS is for compiler flags, they are always used
# NVCCFLAGS is for CUDA compiler flags.
# MATHFLAGS are for special math etc. flags, these are only applied on solver functions
# LDFLAGS flags for linker
# Important note: Do not edit CUDAFLAGS or COMPFLAGS in this file!

#-DNO_WRITE_AT_ALL:  Define to disable write at all to
#                    avoid memleak (much slower IO)
#-DMPICH_IGNORE_CXX_SEEK: Ignores some multiple definition
#                         errors that come up when using
#                         mpi.h in c++ on Cray

# USE_CUDA=1
CUDABLOCKS=108
CMP = mpic++
LNK = mpic++
CC = mpicc
CXX = mpic++

CC_BRAND = nvhpc
CC_BRAND_VERSION = 21.2

#CXXFLAGS += -g -O2 -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1 -gpu=cc80 -Minfo=accel -acc -fopenmp -std=c++11
CXXFLAGS += -g -O2 -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1 -std=c++14
# unit_testing: CXXFLAGS = -O3 -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1 -std=c++14
unit_testing: CXXFLAGS = -g -O3 -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1 -std=c++14

LDFLAGS = -O2 -g -L/appl/spack/v016/install-tree/gcc-4.8.5/nvhpc-21.2-l6xyb4/Linux_x86_64/21.2/cuda/11.2/lib64 -lnvToolsExt
unit_testing: LDFLAGS = -g -O3 -lnvToolsExt

ifeq ($(USE_CUDA),1)
  CMPGPU = OMPI_CXXFLAGS='' OMPI_CXX='nvcc -g -O2 -x cu -std=c++14 --extended-lambda --expt-relaxed-constexpr -gencode arch=compute_80,code=sm_80' mpic++
  unit_testing: CMPGPU = OMPI_CXXFLAGS='' OMPI_CXX='nvcc -g -O3 -x cu -std=c++14 --extended-lambda --expt-relaxed-constexpr -gencode arch=compute_80,code=sm_80' mpic++
  unit_testing: CXXFLAGS += -DUSE_CUDA
  unit_testing: LDFLAGS += -lgomp
else
  CMPGPU = ${CMP}
endif

# CXXFLAGS += -O3 -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1 -std=c++14

#testpackage: CXXFLAGS = -g -O2 -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1 -gpu=cc80 -Minfo=accel -acc -fopenmp -std=c++11
testpackage: CXXFLAGS = -g -O2 -D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=1 -fopenmp -std=c++11
testpackage: NVCCFLAGS = -g -gencode arch=compute_80,code=sm_80 -std=c++11 --prec-sqrt=true --prec-div=true --ftz=false --fmad=false --generate-line-info

MATHFLAGS =
#LDFLAGS = -ta=tesla:lineinfo,keepbin,keepgpu,keepptx
LIB_MPI = -lgomp


#======== PAPI ==========
#Add PAPI_MEM define to use papi to report memory consumption?
CXXFLAGS += -DPAPI_MEM
testpackage: CXXFLAGS += -DPAPI_MEM

#======== Allocator =========
#Use jemalloc instead of system malloc to reduce memory fragmentation https://github.com/jemalloc/jemalloc
#Configure jemalloc with  --with-jemalloc-prefix=je_ when installing it
CXXFLAGS += -DUSE_JEMALLOC -DJEMALLOC_NO_DEMANGLE
testpackage: CXXFLAGS += -DUSE_JEMALLOC -DJEMALLOC_NO_DEMANGLE


#======== Libraries ===========

# LIBRARY_PREFIX = /users/jarohokk/pdir/vlasiator/libs
# LIBRARY_PREFIX2 = /users/jarohokk/pdir/vlasiator/libs
LIBRARY_PREFIX = /users/filippoz/scratch/zonta/libs

#======== Compiled Libraries ===========

# INC_BOOST = -I/$(LIBRARY_PREFIX2)/boost/include
# LIB_BOOST = -L/$(LIBRARY_PREFIX2)/boost/lib -lboost_program_options
# LIB_PAPI = -I/$(LIBRARY_PREFIX2)/papi/include -lpapi
# INC_PAPI = -L/$(LIBRARY_PREFIX2)/papi/lib
# INC_ZOLTAN = -I/$(LIBRARY_PREFIX2)/include
# LIB_ZOLTAN = -L/$(LIBRARY_PREFIX2)/lib -lzoltan
# INC_JEMALLOC = -I/$(LIBRARY_PREFIX2)/jemalloc/include
# LIB_JEMALLOC = -L/$(LIBRARY_PREFIX2)/jemalloc/lib -ljemalloc -Wl,-rpath=$(LIBRARY_PREFIX2)/jemalloc/lib
# INC_VLSV = -I$(LIBRARY_PREFIX2)/vlsv
# LIB_VLSV = -L$(LIBRARY_PREFIX2)/vlsv -lvlsv -Wl,-rpath=$(LIBRARY_PREFIX2)/vlsv/lib
# LIB_PROFILE = -L$(LIBRARY_PREFIX2)/phiprof/lib -lphiprof -Wl,-rpath=$(LIBRARY_PREFIX2)/phiprof/lib
# INC_PROFILE = -I$(LIBRARY_PREFIX2)/phiprof/include

LIB_BOOST = -L/$(LIBRARY_PREFIX)/boost/lib -lboost_program_options
INC_BOOST = -I$(LIBRARY_PREFIX)/boost/include
INC_ZOLTAN = -I$(LIBRARY_PREFIX)/zoltan/include
LIB_ZOLTAN = -L$(LIBRARY_PREFIX)/zoltan/lib -lzoltan -Wl,-rpath=$(LIBRARY_PREFIX)/zoltan/lib
LIB_JEMALLOC = -ljemalloc
LIB_PAPI = -lpapi
INC_VLSV = -I$(LIBRARY_PREFIX)/vlsv
LIB_VLSV = -L$(LIBRARY_PREFIX)/vlsv -lvlsv -Wl,-rpath=$(LIBRARY_PREFIX)/vlsv
LIB_PROFILE = -L$(LIBRARY_PREFIX)/phiprof/lib -lphiprof -Wl,-rpath=$(LIBRARY_PREFIX)/phiprof/lib
INC_PROFILE = -I$(LIBRARY_PREFIX)/phiprof/include
INC_FSGRID = -I$(LIBRARY_PREFIX)/fsgrid/
INC_EIGEN = -I$(LIBRARY_PREFIX)/eigen/
INC_DCCRG = -I$(LIBRARY_PREFIX)/dccrg/
INC_VECTORCLASS = -I$(LIBRARY_PREFIX)/vectorclass/

#======== Header-only Libraries ===========

# INC_EIGEN = -I$(LIBRARY_PREFIX)/eigen
# INC_DCCRG = -I$(LIBRARY_PREFIX)/dccrg
# INC_FSGRID = -I$(LIBRARY_PREFIX)/fsgrid
# #INC_VECTORCLASS = -I$(LIBRARY_PREFIX)/vectorclass/
